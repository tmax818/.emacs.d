#+title: config.org
#+startup: overview latexpreview


* Dear future Tyler,

My [[file:init.el][init.el]] is inspired by [[https://github.com/daedreth/UncleDavesEmacs][Uncle Dave]]'s [[https://github.com/daedreth/UncleDavesEmacs/blob/master/init.el][init.el]]. This file comes from UD's [[https://github.com/daedreth/UncleDavesEmacs/blob/master/config.org][config.org]].




* ui config

** increase font size

#+begin_src emacs-lisp
;; increase font size for better readability
(set-face-attribute 'default nil :height 170)
#+end_src


** global settings

#+begin_src emacs-lisp
;;(global-visual-line-mode 1)
;;(global-display-line-numbers-mode 1)
#+end_src



** set ibuffer

#+begin_src emacs-lisp
  ;;(global-set-key (kbd "C-x C-b") 'ibuffer) ; instead of buffer-list
  (setq ibuffer-expert t) ; stop yes no prompt on delete

   (setq ibuffer-saved-filter-groups
	    (quote (
		    ("default"
		    ("dired" (mode . dired-mode))
		    ("org" (mode . org-mode))
		    ("magit" (name . "^magit"))
		    ("planner" (or
			(name . "^\\*Calendar\\*$")
			(name . "^\\*Org Agenda\\*")))
		     ("emacs" (or
			(name . "^\\*scratch\\*$")
			(name . "^\\*Messages\\*$")))))))

  (add-hook 'ibuffer-mode-hook
	    (lambda ()
	      (ibuffer-switch-to-saved-filter-groups "default")))
#+end_src


** set inital frame size

#+begin_src emacs-lisp
(setq initial-frame-alist '((top . 0) (left . 0) (width . 180) (height . 80)))
#+end_src


** disable auto save

#+begin_src emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+end_src


* themes
#+begin_src emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
(add-to-list 'load-path "~/.emacs.d/themes")
(load-theme 'material t)
#+end_src



* packages

** ivy

#+begin_src emacs-lisp

(use-package ivy
  :ensure t)

#+end_src

** which-key

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :init (which-key-mode))
#+end_src

** [[https://github.com/minad/vertico][vertico]]

#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :custom
    ;; (vertico-scroll-margin 0) ;; Different scroll margin
    (vertico-count 10) ;; Show more candidates
    ;; (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
    :init (vertico-mode))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode))
#+end_src

** [[https://github.com/minad/marginalia][marginalia]]

#+begin_src emacs-lisp
(use-package marginalia
  :ensure t
  :init
  (marginalia-mode)) 
#+end_src

** nov

#+begin_src emacs-lisp
  ;; Read ePub files
  (use-package nov
    :init
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))

#+end_src

** swiper

#+begin_src emacs-lisp

(use-package swiper
  :ensure t
  :bind ("C-s" . 'swiper))

#+end_src



** mark-multiple


#+begin_src emacs-lisp
(use-package mark-multiple
  :ensure t
  :bind ("C-c q" . 'mark-next-like-this))
#+end_src

** dashboard



#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner "~/.emacs.d/img/dashLogo.png")
    (setq dashboard-items '((recents  . 5)
                            (projects . 5)))
    (setq dashboard-banner-logo-title ""))
#+end_src

** [[https://docs.projectile.mx/projectile/index.html][projectile]]

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :init
    (projectile-mode 1))
#+end_src

** [[https://github.com/emacs-citar/citar][citar]]

#+begin_src emacs-lisp
  (use-package citar
  :custom
  (citar-bibliography '("~/Dropbox/orgfiles/zettelkasten/bib/references.bib"))
  :config
  (setq citar-notes-paths '("~/Dropbox/orgfiles/zettelkasten/reading_notes")))
#+end_src

** magit

#+begin_src emacs-lisp
  (use-package magit
  :ensure t
  :config
  (setq magit-push-always-verify nil)
  (setq git-commit-summary-max-length 50)
  :bind
  ("M-g" . magit-status))
#+end_src







** company

#+begin_src emacs-lisp
  (use-package company
  :ensure t
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 3))
#+end_src


* denote

#+begin_src emacs-lisp
  (use-package denote
  :ensure t
  :config
  (progn
    ;; Configure Denote options here
    ;; For example:
    (setq denote-directory "~/Dropbox/orgfiles/zettelkasten")
    (setq denote-file-type 'org)
    (setq denote-prompts '(title keywords)))
    ;; Additional configurations as needed

  :hook
  (dired-mode . denote-dired-mode)
  )

  (require 'denote-journal-extras)
#+end_src


* org-mode

#+begin_src emacs-lisp
(setq org-agenda-files '("~/Dropbox/orgfiles" "~/Dropbox/orgfiles/zettelkasten"))
#+end_src

** org-capture

*** helper function
I did this before I broke down and used denote...

#+begin_src emacs-lisp
  (defun sluggify (file-name)
    (setq slug (concat (replace-regexp-in-string "[^a-zA-Z0-9-]+" "-" file-name) ".org")
    ))


    (defun generate-new-file-name ()
	    (let* (
		   (file-name (read-string "Title: ")) 
		  (my-path (concat "~/Dropbox/orgfiles/zettelkasten/" (replace-regexp-in-string "[^a-zA-Z0-9-]+" "-" file-name) ".org")))
		   
	      (setq org-capture-filename file-name) my-path))


	    
#+end_src

** org-capture-template

#+begin_src emacs-lisp
    (setq org-capture-templates
		'(
		  ("a" "Appt" entry (file+headline "~/Dropbox/orgfiles/index.org" "Appointments")
		   "** APPT %? \nDEADLINE: %^T \n %i\n")

		  ("s" "Stuff" entry (file+headline "~/Dropbox/orgfiles/index.org" "Capture")
		   "** STUFF %? \n:PROPERTIES:\n:created_at: %u \n:END:\n\n")

		  ("n" "Note" entry (file (lambda () (generate-new-file-name)))
		   "* %(format org-capture-filename) %^G\n:PROPERTIES:\n:created_at: %u \n:END:\n\n#+biblography: citations.bib\n* backlink:  %a " 
		   )
    )
  )

  #+end_src


** $\LaTeX$

#+begin_src emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 3.0))
#+end_src


* org-template with denote

;#+begin_src emacs-lisp
  (with-eval-after-load 'org-capture
  (add-to-list 'org-capture-templates
               '("n" "New note" plain (file denote-last-path)
                 (function (lambda () (denote-org-capture-with-prompts :title :keyword :date (concat denote-directory "/prep/"))))
                 :no-save t :immediate-finish nil :kill-buffer t :jump-to-captured t)))
;#+end_src


* misc




#+begin_src emacs-lisp
    ;; Biblio package for adding BibTeX records and download publications
  (use-package biblio)
#+end_src


